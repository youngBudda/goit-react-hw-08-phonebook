{"version":3,"file":"static/js/941.d847f9c0.chunk.js","mappings":"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","sources":["components/ContactsLayout/ContactsLayout.styled.js","components/ContactsLayout/ContactsLayout.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","components/ContactList/ContactList.styled.js","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/LogoutBtn/LogoutBtn.styled.js","components/LogoutBtn/LogoutBtn.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport vibration from '../../images/vibration.png';\n\nexport const StyledContactsLayout = styled.div`\n  width: 100vw;\n  height: 100%;\n  padding: 20px 0;\n\n  div.cover {\n    max-width: 80%;\n    min-width: 870px;\n    height: 80%;\n    padding: 50px;\n    background-color: #fff;\n    border-radius: 30px;\n    margin: 0 auto;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n      rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  }\n\n  div.wrapper {\n    width: 100%;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    position: relative;\n  }\n\n  h1 {\n    display: inline-block;\n    margin-bottom: 20px;\n    margin-right: 76.5px;\n  }\n\n  h1::before {\n    content: '.';\n    width: 42px;\n    height: 42px;\n    opacity: 0;\n    display: inline-block;\n    position: absolute;\n    z-index: 1;\n    top: 9px;\n    left: 13px;\n    background-image: url(${vibration});\n    background-color: transparent;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    color: transparent;\n    animation: tada 1250ms ease-in-out 1500ms;\n  }\n\n  img {\n    position: relative;\n    width: 50px;\n    display: inline;\n    margin: 0 0 20px 16px;\n    animation: tada 1250ms ease-in-out 1700ms;\n    z-index: 2;\n  }\n`;\n","import { StyledContactsLayout } from './ContactsLayout.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactsLayout = ({ children }) => {\n  return <StyledContactsLayout>{children}</StyledContactsLayout>;\n};\n\nContactsLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ContactsLayout;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  width: 100%;\n  display: flex;\n  align-items: baseline;\n  margin-bottom: 20px;\n\n  input {\n    height: 28px;\n    width: 272.5px;\n    padding: 2px 10px;\n    border: none;\n    border-radius: 5px;\n    margin-right: 18px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 6px 14px 0px;\n    font-family: 'IBM Plex Mono';\n    font-size: calc(12px + 3 * (100vw - 320px) / 930);\n    color: #535353;\n  }\n\n  input.name {\n    margin-right: 20px;\n  }\n\n  input:focus {\n    outline: 1px solid #fff500;\n  }\n\n  input::placeholder {\n    color: #797979;\n  }\n\n  button {\n    width: 20px;\n    height: 20px;\n    padding: 0;\n    border: none;\n    background-color: #fff500;\n    border-radius: 50%;\n    color: white;\n    font-weight: bold;\n    transform: rotate(45deg);\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 5px 14px 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 90%;\n    /* transition: color 250ms cubic-bezier(0.250, 0.460, 0.450, 0.940), transform 250ms cubic-bezier(0.250, 0.460, 0.450, 0.940); */\n  }\n\n  button:hover {\n    /* color: white; */\n    transform: scale(1.2) rotate(45deg);\n  }\n`;\n","import { StyledForm } from './Form.styled';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ onAddContact }) => {\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newContact = {\n      name: evt.currentTarget.name.value,\n      number: evt.currentTarget.number.value,\n    };\n    onAddContact(newContact);\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <input\n        className=\"name\"\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"new contact name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        type=\"tel\"\n        placeholder=\"number\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">\n        <span>✕</span>\n      </button>\n    </StyledForm>\n  );\n};\n\nForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const StyledContacts = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n\n  div.animated {\n    width: auto;\n    height: auto;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const StyledContact = styled.li`\n  text-align: left;\n  height: 28px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n\n  p {\n    padding: 2px 5px;\n    display: inline-flex;\n    align-items: baseline;\n    font-size: calc(12px + 3 * (100vw - 320px) / 930);\n    width: 100%;\n    margin-bottom: 0;\n    font-family: 'IBM Plex Mono';\n    color: #535353;\n  }\n\n  p > span {\n    color: #fff500;\n    margin-right: 20px;\n  }\n\n  a {\n    display: inline-block;\n    color: black;\n    text-decoration: none;\n    width: 565px;\n    height: 100%;\n    padding: 0 15px;\n    margin-right: 18px;\n    border-radius: 5px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 6px 14px 0px;\n    transition: transform 250ms cubic-bezier(0.25, 0.46, 0.45, 0.94),\n      box-shadow 250ms cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n\n  a:hover {\n    transform: scaleY(1.1);\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 12px 20px,\n      rgba(0, 0, 0, 0.22) 0px 6px 6px;\n  }\n\n  button {\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    background-color: transparent;\n    padding: 0;\n    border: none;\n    color: black;\n    font-size: 90%;\n    font-weight: bold;\n    display: inline;\n    transition: transform 250ms ease;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 5px 14px 0px;\n    border-radius: 50%;\n  }\n\n  button:hover {\n    transform: scale(1.2);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledContact } from './Contact.styled';\nimport { useSpring, animated } from 'react-spring';\n\nconst Contact = ({ contactItemData, index, onDeleteContact }) => {\n  const spring = useSpring({\n    from: { opacity: 0, transform: 'perspective(400px) rotateX(90deg)' },\n    to: { opacity: 1, transform: 'perspective(400px) rotateX(0deg)' },\n    config: { duration: 100, mass: 1, tension: 280, friction: 20 },\n    delay: index * 50,\n  });\n\n  return (\n    <animated.div style={spring}>\n      <StyledContact>\n        <a href={`tel:+${contactItemData.number}`}>\n          <p>\n            <span>●</span>\n            {contactItemData.name}: {contactItemData.number}\n          </p>\n        </a>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContact(contactItemData.id)}\n        >\n          ✕\n        </button>\n      </StyledContact>\n    </animated.div>\n  );\n};\n\nContact.propTypes = {\n  contactItemData: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  index: PropTypes.number,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { StyledContacts } from './ContactList.styled';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport Contact from '../Contact/Contact';\n\nconst ContactList = ({ onDeleteContact }) => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <StyledContacts>\n      {filteredContacts.map((contact, idx) => {\n        return (\n          <Contact\n            onDeleteContact={onDeleteContact}\n            contactItemData={contact}\n            key={contact.id}\n            index={idx}\n          />\n        );\n      })}\n    </StyledContacts>\n  );\n};\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\nimport filter from '../../images/filter2.png';\n\nexport const StyledFilter = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  max-height: 28px;\n  width: 310.5px;\n  height: 28px;\n  text-align: left;\n\n  input {\n    opacity: 1;\n    width: 200px;\n    height: 28px;\n    padding: 2px 10px;\n    border: 2px solid #fff500;\n    border-radius: 15px;\n    margin-right: 26px;\n    /* box-shadow: rgba(100, 100, 111, 0.2) 0px 6px 14px 0px; */\n    font-family: 'IBM Plex Mono';\n    font-size: calc(12px + 3 * (100vw - 320px) / 930);\n    color: #535353;\n    animation: slide-in-fwd-center 500ms cubic-bezier(0.25, 0.46, 0.45, 0.94)\n      both;\n  }\n\n  input:focus {\n    /* outline: 1px solid #fff500; */\n    outline: none;\n  }\n\n  button {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 0;\n    background-color: transparent;\n    background-image: url(${filter});\n    background-size: 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n    cursor: pointer;\n    outline: none;\n    vertical-align: super;\n  }\n\n  button:hover {\n    transform: scale(1.1);\n  }\n\n  span {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledFilter } from './Filter.styled';\nimport { useState } from 'react';\nimport { selectFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nfunction Filter({ onFilter }) {\n  const filter = useSelector(selectFilter);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleClick = () => {\n    isVisible ? setIsVisible(false) : setIsVisible(true);\n  };\n\n  const handleInputChange = event => {\n    onFilter(event.target.value);\n  };\n\n  return (\n    <StyledFilter>\n      {isVisible && (\n        <input onChange={handleInputChange} value={filter} type=\"text\" />\n      )}\n      <button type=\"button\" onClick={handleClick}>\n        <span>Filter</span>\n      </button>\n    </StyledFilter>\n  );\n}\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const StyledLogoutBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 150px;\n  height: 60px;\n  border-radius: 15px;\n  border: 2px solid #fff500;\n  background-color: white;\n  margin-left: auto;\n  font-size: 17px;\n  padding: 12px;\n  overflow: hidden;\n  transition: letter-spacing 0.25s ease;\n\n  &:hover {\n    letter-spacing: 0.1em;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 30px;\n    transform: scaleX(1.8) scaleY(1.2);\n    display: inline-block;\n    font-size: 25px;\n    font-weight: bold;\n    color: #fff500;\n    transition: margin-left 0.25s ease;\n  }\n\n  &:hover span {\n    margin-left: 22px;\n  }\n`;\n","import { StyledLogoutBtn } from './LogoutBtn.styled';\nimport PropTypes from 'prop-types';\n\nconst LogoutBtn = ({ onLogout }) => {\n  return (\n    <StyledLogoutBtn type=\"button\" onClick={() => onLogout()}>\n      Logout<span className=\"right\">→</span>\n    </StyledLogoutBtn>\n  );\n};\n\nLogoutBtn.propTypes = {\n  onLogout: PropTypes.func.isRequired,\n};\n\nexport default LogoutBtn;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  getContactsThunk,\n  deleteContactThunk,\n  addContactThunk,\n} from 'redux/contacts/contactsThunks';\nimport { logOutThunk } from 'redux/user/userThunks';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport ContactsLayout from 'components/ContactsLayout/ContactsLayout';\nimport Form from 'components/Form/Form';\nimport ContactList from 'components/ContactList/ContactList';\nimport phone from '../images/phone-short.png';\nimport Filter from 'components/Filter/Filter';\nimport LogoutBtn from 'components/LogoutBtn/LogoutBtn';\n\nconst Contacts = () => {\n  const items = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n    //     .unwrap().catch((error)=>{toast.error(error.message); })\n  }, [dispatch]);\n\n  const onFilter = filterData => {\n    dispatch(setFilter(filterData));\n  };\n\n  const onLogout = () => {\n    dispatch(logOutThunk());\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  const onAddContact = newContact => {\n    const checkedContact = items.find(\n      contact => newContact.name === contact.name\n    );\n    if (checkedContact) {\n      toast.info(`${newContact.name} is already in your contacts`);\n      return;\n    } else {\n      dispatch(addContactThunk(newContact));\n    }\n  };\n\n  return (\n    <main>\n      <ContactsLayout>\n        <div className=\"cover\">\n          <div className=\"wrapper\">\n            <img src={phone} alt=\"phone logo\" />\n            <h1>\n              Contact\n              <span>.</span>\n            </h1>\n            <Filter onFilter={onFilter} />\n            <LogoutBtn onLogout={onLogout} />\n          </div>\n          <Form onAddContact={onAddContact} />\n          {items.length > 0 && (\n            <ContactList onDeleteContact={onDeleteContact} />\n          )}\n        </div>\n      </ContactsLayout>\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledContactsLayout","styled","_templateObject","_taggedTemplateLiteral","vibration","_ref","children","_jsx","StyledForm","onAddContact","_jsxs","onSubmit","evt","preventDefault","newContact","name","currentTarget","value","number","reset","className","type","placeholder","pattern","title","required","StyledContacts","StyledContact","contactItemData","index","onDeleteContact","spring","useSpring","from","opacity","transform","to","config","duration","mass","tension","friction","delay","animated","style","href","concat","onClick","id","filteredContacts","useSelector","selectFilteredContacts","map","contact","idx","Contact","StyledFilter","onFilter","filter","selectFilter","_useState","useState","_useState2","_slicedToArray","isVisible","setIsVisible","onChange","event","target","StyledLogoutBtn","onLogout","items","selectContacts","dispatch","useDispatch","useEffect","getContactsThunk","ContactsLayout","src","alt","Filter","filterData","setFilter","LogoutBtn","logOutThunk","Form","find","toast","addContactThunk","length","ContactList","deleteContactThunk"],"sourceRoot":""}